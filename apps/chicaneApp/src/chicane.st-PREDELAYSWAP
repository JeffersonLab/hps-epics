// PS = Pair Spectrometer
// MT = Mini Torus

program seqChicane ("P=a")

option -c;  // donot wait on pv connections
option -r;  // donot allow multiple instances

short  onBtn;   assign onBtn   to "{P}:start";  monitor onBtn;
short  offBtn;  assign offBtn  to "{P}:stop";   monitor offBtn;
short  calcBtn; assign calcBtn to "{P}:calc";   monitor calcBtn;
float  iDelta;  assign iDelta  to "{P}:iDelta"; monitor iDelta;

int    tHoldMax; assign tHoldMax to "{P}:tHoldMax";
string msg;      assign msg      to "{P}:msg";

float  iSetPS;   assign iSetPS   to "{P}:iSetPS";
float  iMonPS;   assign iMonPS   to "{P}:iMonPS";  monitor iMonPS;
float  iCalcPS;  assign iCalcPS  to "{P}:iCalcPS";
float  iSetMT;   assign iSetMT   to "{P}:iSetMT";
float  iMonMT;   assign iMonMT   to "{P}:iMonMT";  monitor iMonMT;
float  iCalcMT;  assign iCalcMT  to "{P}:iCalcMT";
float  complete; assign complete to "{P}:complete";
float  energy;   assign energy   to "{P}:energy";
short  isReady;  assign isReady  to "{P}:isReady";
short  isError;  assign isError  to "{P}:isError";
short  isOff;    assign isOff    to "{P}:isOff";

//float energyB;      assign energyB to "hallb_energyB";
//float iSetPS;       assign iSetPS  to "PSPECISET";
//float iMonPS;       assign iMonPS  to "PSPECIRBCK";
//float iSetMT;       assign iSetMT  to "MTSETI";
//float iMonMT;       assign iMonMT  to "MTIRBCK";
//short powerMT;      assign powerMT to "MTPSONSET"; 
//short powerPS;      assign powerPS to "PSPECC.B0";

int tConfirm = 5; // time to give user a chance to cancel (seconds)
float iMaxPS = 2700.0;  // saturation current to hold at (Amps)
float iMaxMT = 3500.0;  // saturation current to hold at (Amps)

float iStartPS;
float iStartMT;
int count;


int countDriver;
short  gotoZeroBtn; assign gotoZeroBtn to "{P}:gotoZero"; monitor gotoZeroBtn;
short  gotoMaxBtn;  assign gotoMaxBtn  to "{P}:gotoMax";  monitor gotoMaxBtn;
short  gotoSetBtn;  assign gotoSetBtn  to "{P}:gotoSet";  monitor gotoSetBtn;


%{
//#include "math.h"
float getCurrentPS(float ee) {
    return 0.22727*0.1537*1e4*ee + 0.6657;
}
float getCurrentMT(float ee) {
    return getCurrentPS(ee) / 0.5228;
}
int isSimilar(float x1,float x2,float y1,float y2,float delta) {
    return fabs(x1-x2)<delta && fabs(y1-y2)<delta;
}
float minComplete(float x0,float x1,float x2,float y0,float y1,float y2) {
    const float cx = (x1-x0) / (x2-x0);
    const float cy = (y1-y0) / (y2-y0);
    return cx<cy ? cx : cy;
}
float getRampCurrent(int step,int nstep,float i0,float i1) {
    return i0 + (float)step/nstep*(i1-i0);
}
}%

ss seqChicane {

    state init {

	when (pvConnectCount() < pvChannelCount()) {
            sprintf(msg,"Waiting for PVs (%d/%d)",pvConnectCount(),pvChannelCount());
            pvPut(msg);
	} state init
        
        when () {
            isOff=0;
            isReady=0;
            pvPut(isOff);
            pvPut(isReady);
            pvGet(energy);
            pvGet(iSetPS);
            pvGet(iSetMT);
            iCalcPS=getCurrentPS(energy);
            iCalcMT=getCurrentMT(energy);
            pvPut(iCalcPS);
            pvPut(iCalcMT);
            sprintf(msg,"Initialized");
            pvPut(msg);
        } state idle
    }

    state idle {

        option -e; // execute entry even if previous state was the same

        entry {
            pvGet(iSetPS);
            pvGet(iSetMT);
        }

        when (pvConnectCount() < pvChannelCount() ) {} state init

        when (offBtn) {
            offBtn = 0;
            pvPut(offBtn);
        } state rampOff

        when (onBtn) {
            onBtn = 0;
            pvPut(onBtn);
        } state pauseBeforeRampToMax

        when (calcBtn) {
            calcBtn=0;
            pvPut(calcBtn);
        } state calculate

        // Chicane ready when IOC was restarted:
        when (energy > 0 &&
                isSimilar(iSetPS,iMonPS, iSetMT,iMonMT, iDelta) && 
                isSimilar(iSetPS,iCalcPS,iSetMT,iCalcMT,iDelta)) {
        } state ready

        // 
        when (!isSimilar(iSetPS,0,iSetMT,0,iDelta) ||
              !isSimilar(iMonPS,0,iMonMT,0,iDelta)) {
        } state external

        // Chicane off when IOC was restarted:
        when (isSimilar(iMonPS,0,iMonMT,0,iDelta) &&
              isSimilar(iSetPS,0,iSetMT,0,iDelta)) {
            if (!isOff) {
                isOff=1;
                sprintf(msg,"OFF");
                pvPut(isOff);
                pvPut(msg);
            }
            pvGet(iSetPS);
            pvGet(iSetMT);
        } state idle

        // 
        when () {} state external
    }

    state calculate {
        when () {
            //pvGet(energyB);
            //energy=energyB;
            //pvPut(energy);
            pvGet(energy);
            sprintf(msg,"Beam Energy Retrieved:  %.1f",energy);
            pvPut(msg);
            epicsThreadSleep(2);
            iCalcPS=getCurrentPS(energy);
            iCalcMT=getCurrentMT(energy);
            pvPut(iCalcPS);
            pvPut(iCalcMT);
            sprintf(msg,"Currents Recalculated");
            pvPut(msg);
            epicsThreadSleep(2);
            sprintf(msg,"OFF");
            pvPut(msg);
        } state idle
    }

    state external {
        when () {
            isOff=0;
            sprintf(msg,"External Control");
            pvPut(isOff);
            pvPut(msg);
        } state idle
    }

    state rampOff {
        
        entry {
            sprintf(msg,"Ramping to Zero");
            iSetPS = 0;
            iSetMT = 0;
	    complete = 0;
            pvPut(msg);
            pvPut(iSetPS);
            pvPut(iSetMT);
	    pvPut(complete);
            iStartPS=iMonPS;
            iStartMT=iMonMT;
        }

        when (isSimilar(iMonPS,0.,iMonMT,0.,iDelta)) {
            sprintf(msg,"OFF");
	    complete = 0;
            isOff = 1;
            pvPut(isOff);
            pvPut(msg);
	    pvPut(complete);
        } state idle 

        when () {
            complete = 1-minComplete(iStartPS,iMonPS,0,iStartMT,iMonMT,0);
            pvPut(complete);
        } state rampOff
    }
    
    state ready {

        option -e; // execute entry even if previous state was the same

        entry {
            if (isOff) {
                isOff=0;
                pvPut(isOff);
            }
            if (!isReady) {
                isReady=1;
                sprintf(msg,"Chicane Ready");
                pvPut(isReady);
                pvPut(msg);
            }
            pvGet(iSetPS);
            pvGet(iSetMT);
        }
        
        when (pvConnectCount() < pvChannelCount() ) {} state init

        when (offBtn) {} state rampOff

        when (calcBtn) {
            calcBtn=0;
            pvPut(calcBtn);
            sprintf(msg,"Must turn OFF to Recalculate");
            pvPut(msg);
            epicsThreadSleep(2);
            sprintf(msg,"Chicane Ready");
            pvPut(msg);
        } state ready
        
        when (onBtn) {
            onBtn=0;
            pvPut(onBtn);
            sprintf(msg,"Chicane already ON");
            pvPut(msg);
            epicsThreadSleep(2);
            sprintf(msg,"Chicane Ready");
            pvPut(msg);
        } state ready

        when (!isSimilar(iCalcPS,iSetPS,iCalcMT,iSetMT,iDelta)) {
        } state external

	when (!isSimilar(iMonPS,iSetPS,iMonMT,iSetMT,iDelta)) {
	    sprintf(msg,"Current NOT at spec!");
	    pvPut(msg);
            isError=1;
            complete=0;
            pvPut(complete);
            pvPut(isError);
	} state ready
	
        when (isSimilar(iMonPS,iSetPS,iMonMT,iSetMT,iDelta)) {
	    sprintf(msg,"Chicane Ready");
	    pvPut(msg);
            complete=1;
            isError=0;
            pvPut(complete);
            pvPut(isError);
	} state ready

        exit {
            complete=0;
            isReady=0;
            pvPut(complete);
            pvPut(isReady);
        }
    }

    state pauseBeforeRampToMax {
        
	option -t; // only reset delay timer if previous state was different
       
        entry {
            count = 0;
            complete = 0;
            pvPut(complete);
            sprintf(msg,"Ramping Up to A Max in %d seconds",tConfirm);
            pvPut(msg);
        }

	when (offBtn) {} state rampOff
       
        when (delay(tConfirm)) {
            complete = 0;
            iSetPS = iMaxPS;
            iSetMT = iMaxMT;
            pvPut(iSetPS);
            pvPut(iSetMT);
            pvPut(complete);
        } state rampToMax

        when () {
            %% complete = (float)(count) / tConfirm;
            pvPut(complete);
            sprintf(msg,"Ramping Up to A Max in %d seconds",tConfirm-count);
            pvPut(msg);
            epicsThreadSleep(1);
            count++;
        } state pauseBeforeRampToMax
    }

    state rampToMax {

	option -e; // execute entry even if previous state was the same

	entry {
            isOff=0;
            pvPut(isOff);
	    pvGet(iSetPS);
	    pvGet(iSetMT);
            sprintf(msg,"Ramping Up to Max");
            pvPut(msg);
	}

        when (offBtn) {} state rampOff
        when (pvConnectCount() < pvChannelCount() ) {} state init
        
        when ( isSimilar(iSetPS,iMonPS,iSetMT,iMonMT,iDelta) ) { 
	} state holdAtMax
	
        when (calcBtn) {
            calcBtn=0;
            pvPut(calcBtn);
            sprintf(msg,"Must turn OFF to Recalculate");
            pvPut(msg);
            epicsThreadSleep(1);
        } state rampToMax
	
        when () {
            complete = minComplete(0,iMonPS,iSetPS,0,iMonMT,iSetMT);
	    pvPut(complete);
	    epicsThreadSleep(1);
	    pvGet(iSetPS);
	    pvGet(iSetMT);
	} state rampToMax
    }

    state holdAtMax {

	option -t; // only reset delay timer if previous state was a different state
	
	entry {
	    count = 0;
	    complete = 0;
	    pvGet(tHoldMax);
	    sprintf(msg,"Holding at Max for %ds",tHoldMax);
	    pvPut(msg);
	    pvPut(complete);
	}

        when (offBtn) {} state rampOff
        
        when (pvConnectCount() < pvChannelCount() ) {} state init

	when (delay(tHoldMax) && isSimilar(iMonPS,iSetPS,iMonMT,iSetMT,iDelta)) {
	    complete = 0;
	    pvPut(complete);
	} state rampToSetpoint

	when (delay(tHoldMax) && !isSimilar(iMonPS,iSetPS,iMonMT,iSetMT,iDelta)) {
	    sprintf(msg,"Waiting, current NOT at Max.");
	    pvPut(msg);
	} state holdAtMax
        
        when (calcBtn) {
            calcBtn=0;
            pvPut(calcBtn);
            sprintf(msg,"Must turn OFF to Recalculate");
            pvPut(msg);
            epicsThreadSleep(1);
	    sprintf(msg,"Holding at Max for %ds",tHoldMax-count);
	    pvPut(msg);
            count++;
        } state holdAtMax
	
        when () {
	    %% complete = (float)(count) / tHoldMax;
	    pvPut(complete);
	    sprintf(msg,"Holding at Max for %ds",tHoldMax-count);
	    pvPut(msg);
	    epicsThreadSleep(1);
	    count++;
	} state holdAtMax
    }

    state rampToSetpoint {

        entry {
            complete = 1;
	    pvGet(energy);
            iStartPS = iMonPS;
            iStartMT = iMonMT;
            iSetPS = iCalcPS;
            iSetMT = iCalcMT;
            sprintf(msg,"Ramping Down to Setpoint");
            pvPut(iSetPS);
            pvPut(iSetMT);
            pvPut(msg);
            pvPut(complete);
        }
        
	when (offBtn) {} state rampOff

        when (pvConnectCount() < pvChannelCount() ) {} state init

	when ( isSimilar(iSetPS,iMonPS,iSetMT,iMonMT,iDelta) ) {
            complete=1;
            pvPut(complete);
        } state ready
        
        when (calcBtn) {
            calcBtn=0;
            pvPut(calcBtn);
            sprintf(msg,"Must turn OFF to Recalculate");
            pvPut(msg);
            epicsThreadSleep(1);
	    sprintf(msg,"Ramping Down to Setpoint");
	    pvPut(msg);
            count++;
        } state rampToSetpoint
	
        when () {
	    pvGet(iSetPS);
	    pvGet(iSetMT);
            complete = 1-minComplete(iStartPS,iMonPS,iSetPS,iStartMT,iMonMT,iSetMT);
            pvPut(complete);
	} state rampToSetpoint
    }
}







ss seqChicaneDrive {
    
    state init {
        when (pvConnectCount() == pvChannelCount()) {} state idle
    }

    state idle {
        
        when (gotoMaxBtn) {
            gotoMaxBtn=0;
            pvPut(gotoMaxBtn);
            iStartPS=iMonPS;
            iStartMT=iMonMT;
            for (countDriver=1; countDriver<=10; ++countDriver) {
                iMonPS = getRampCurrent(countDriver,10,iStartPS,iMaxPS);
                iMonMT = getRampCurrent(countDriver,10,iStartMT,iMaxMT);
                pvPut(iMonPS);
                pvPut(iMonMT);
                epicsThreadSleep(0.3);
            }
            iMonPS=iMaxPS;
            iMonMT=iMaxMT;
            pvPut(iMonPS);
            pvPut(iMonMT);
        } state idle
    
        when (gotoSetBtn) {
            gotoSetBtn=0;
            pvPut(gotoSetBtn);
            iStartPS=iMonPS;
            iStartMT=iMonMT;
            for (countDriver=1; countDriver<=10; ++countDriver) {
                iMonPS = getRampCurrent(countDriver,10,iStartPS,iSetPS);
                iMonMT = getRampCurrent(countDriver,10,iStartMT,iSetMT);
                pvPut(iMonPS);
                pvPut(iMonMT);
                epicsThreadSleep(0.3);
            }
            iMonPS=iSetPS;
            iMonMT=iSetMT;
            pvPut(iMonPS);
            pvPut(iMonMT);
        } state idle
        
        when (gotoZeroBtn) {
            gotoZeroBtn=0;
            pvPut(gotoZeroBtn);
            iStartPS=iMonPS;
            iStartMT=iMonMT;
            for (countDriver=1; countDriver<=10; ++countDriver) {
                iMonPS=getRampCurrent(countDriver,10,iStartPS,0);
                iMonMT=getRampCurrent(countDriver,10,iStartMT,0);
                pvPut(iMonPS);
                pvPut(iMonMT);
                epicsThreadSleep(0.3);
            }
            iMonPS=0;
            iMonMT=0;
            pvPut(iMonPS);
            pvPut(iMonMT);
        } state idle
    }
}

